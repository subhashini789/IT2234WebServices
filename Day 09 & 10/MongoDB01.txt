(01)Insert one data set using Insert Document option in MongoDB. 

(02)Insert one data set using db.students.insertOne() query.
db.studentdb.insertOne(
    {
    "regno": "2021IT002",
        "name": "John",
        "age": 25,
        "degree": "IT",
        "gpa": 3.3,
        "gender": "Male",
        "skills": ["JavaScript", "MongoDB", "SQL"]
    })

(03)Insert data set using db.studentsMany() query.
    db.studentdb.insertMany(
    [
    {
        "regno": "2021IT003",
        "name": "Mike",
        "age": 24,
        "degree": "CS",
        "gpa": 3.6,
        "gender": "Male",
        "skills": ["Python", "Node", "MongoDB"]
      },
      {
        "regno": "2021IT004",
        "name": "Anne",
        "age": 22,
        "degree": "Software Engineering",
        "gpa": 3.9,
        "gender": "Female",
        "skills": ["JavaScript", "Matlab", "Azure"]
      },
      {
        "regno": "2021IT005",
        "name": "Paul",
        "age": 26,
        "degree": "Data Science",
        "gpa": 3.7,
        "gender": "Male",
        "skills": ["Python", "Java", "SQL"]
      }
      ])

(04)Filter only name and age.

    Project = {name:1,age:1,_id:0}

(05)Find the details whose regno is "2021IT002".

    query = {regno:"2021IT001"}

    shell query: db.studentdb.find({"regno":"2021IT002"})

(06)Find female studentdb details.

    query = {gender:"Female"}

    shell query: db.studentdb.find({gender:"Female"})

(07)Find the studentdb whose age is greater than 24.

    query = {age:{$gt:24}}

    shell query: db.studentdb.find({age:{$gt:24}})

(08)Find the details of studentdb that have skills in "MongoDB".

    query = {skills:{$in:['MongoDB']}}

    shell query: db.studentdb.find({skills:{$in:['MongoDB']}})

(09)Find the studentdb that have skills in "MongoDB" or "Python".

    query = {skills:{$in:['MongoDB','Python']}}

    shell query: db.studentdb.find({skills:{$in:['MongoDB','Python']}})

(10)Find the details of first female student.

    shell query: db.studentdb.findOne({gender:"Female"})

(11)Sort the details by gpa ascending order.

    project = {_id:0}
    sort = {gpa:1}

    shell query: db.studentdb.find().sort({gpa:1})

(12)Sort the details by gpa descending order.

    project = {_id:0}
    sort = {gpa:-1}
    
    shell query: db.studentdb.find().sort({gpa:-1})

(13)Sort details by GPA and name in ascending order.

    project = {_id:0,name:1,gpa:1}
    sort = {gpa:1,name:1}

    shell query: db.studentdb.find().sort({gpa:1,name:1})

(14)Sort by gpa ascending order who are stydying "IT" as degree.

    query = {degree:"IT"}
    project = {_id:0,name:1,gpa:1,degree,1}
    sort = {gpa:1}

    shell query: db.studentdb.find({degree:"IT"}).sort({gpa:1})

(15)Sort by gpa ascending order who are stydying "IT" as the degree and gender is "Male".

    query = {degree:"IT",gender:"Male"}
    project = {_id:0,name:1,gpa:1,degree,1}
    sort = {gpa:1}

    shell query: db.studentdb.find({degree:"IT",gender:"Male"}).sort({gpa:1})